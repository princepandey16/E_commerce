import React, { useState, useEffect, useRef } from 'react';
import { Send, Phone, Video, MoreVertical, Smile, Paperclip, Search, Users, Lock, Shield, Plus, Settings } from 'lucide-react';

export default function ChatApp() {
  const [currentUser] = useState({ id: 1, name: 'You', avatar: '👤', status: 'online' });
  const [activeChat, setActiveChat] = useState(null);
  const [message, setMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [showGroupModal, setShowGroupModal] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const [selectedUsers, setSelectedUsers] = useState([]);
  const messagesEndRef = useRef(null);

  const [users] = useState([
    { id: 2, name: 'Alice Johnson', avatar: '👩', status: 'online', lastSeen: 'now' },
    { id: 3, name: 'Bob Smith', avatar: '👨', status: 'away', lastSeen: '5 min ago' },
    { id: 4, name: 'Emma Wilson', avatar: '👩‍💼', status: 'online', lastSeen: 'now' },
    { id: 5, name: 'James Brown', avatar: '👨‍💻', status: 'offline', lastSeen: '2 hours ago' },
    { id: 6, name: 'Sarah Davis', avatar: '👩‍🎨', status: 'online', lastSeen: 'now' }
  ]);

  const [chats, setChats] = useState([
    {
      id: 1,
      type: 'private',
      name: 'Alice Johnson',
      avatar: '👩',
      participants: [1, 2],
      lastMessage: 'Hey! How are you doing?',
      lastMessageTime: '10:30 AM',
      unreadCount: 2,
      isEncrypted: true,
      messages: [
        { id: 1, senderId: 2, content: 'Hey there! How are you?', timestamp: '10:25 AM', encrypted: true },
        { id: 2, senderId: 1, content: 'Hi Alice! I\'m doing great, thanks for asking!', timestamp: '10:27 AM', encrypted: true },
        { id: 3, senderId: 2, content: 'That\'s wonderful to hear! 😊', timestamp: '10:30 AM', encrypted: true }
      ]
    },
    {
      id: 2,
      type: 'group',
      name: 'Team Project',
      avatar: '👥',
      participants: [1, 2, 3, 4],
      lastMessage: 'Bob: Let\'s schedule a meeting',
      lastMessageTime: '9:45 AM',
      unreadCount: 0,
      isEncrypted: true,
      messages: [
        { id: 4, senderId: 3, content: 'Good morning everyone!', timestamp: '9:30 AM', encrypted: true },
        { id: 5, senderId: 1, content: 'Morning Bob! Ready for today\'s tasks', timestamp: '9:35 AM', encrypted: true },
        { id: 6, senderId: 3, content: 'Let\'s schedule a meeting for this afternoon', timestamp: '9:45 AM', encrypted: true }
      ]
    },
    {
      id: 3,
      type: 'private',
      name: 'Emma Wilson',
      avatar: '👩‍💼',
      participants: [1, 4],
      lastMessage: 'Thanks for your help!',
      lastMessageTime: 'Yesterday',
      unreadCount: 0,
      isEncrypted: true,
      messages: [
        { id: 7, senderId: 4, content: 'Could you help me with the presentation?', timestamp: 'Yesterday 3:20 PM', encrypted: true },
        { id: 8, senderId: 1, content: 'Of course! I\'ll send you the templates', timestamp: 'Yesterday 3:25 PM', encrypted: true },
        { id: 9, senderId: 4, content: 'Thanks for your help!', timestamp: 'Yesterday 4:10 PM', encrypted: true }
      ]
    }
  ]);

  const filteredChats = chats.filter(chat =>
    chat.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getUserName = (userId) => {
    if (userId === currentUser.id) return 'You';
    const user = users.find(u => u.id === userId);
    return user ? user.name : 'Unknown';
  };

  const sendMessage = () => {
    if (!message.trim() || !activeChat) return;

    const newMessage = {
      id: Date.now(),
      senderId: currentUser.id,
      content: message,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      encrypted: true
    };

    setChats(prev => prev.map(chat =>
      chat.id === activeChat.id
        ? {
            ...chat,
            messages: [...chat.messages, newMessage],
            lastMessage: message,
            lastMessageTime: newMessage.timestamp
          }
        : chat
    ));

    setMessage('');
    
    // Simulate a response after 1-2 seconds
    setTimeout(() => {
      const responses = [
        'That sounds great!',
        'I agree with you',
        'Interesting point!',
        'Let me think about that',
        'Sure, no problem!',
        'Thanks for letting me know',
        'I\'ll get back to you on that'
      ];
      
      const responseMessage = {
        id: Date.now() + 1,
        senderId: activeChat.type === 'private' ? activeChat.participants.find(id => id !== currentUser.id) : 2,
        content: responses[Math.floor(Math.random() * responses.length)],
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        encrypted: true
      };

      setChats(prev => prev.map(chat =>
        chat.id === activeChat.id
          ? {
              ...chat,
              messages: [...chat.messages, responseMessage],
              lastMessage: responseMessage.content,
              lastMessageTime: responseMessage.timestamp
            }
          : chat
      ));
    }, 1000 + Math.random() * 1000);
  };

  const createGroup = () => {
    if (!newGroupName.trim() || selectedUsers.length === 0) return;

    const newGroup = {
      id: Date.now(),
      type: 'group',
      name: newGroupName,
      avatar: '👥',
      participants: [currentUser.id, ...selectedUsers],
      lastMessage: 'Group created',
      lastMessageTime: 'now',
      unreadCount: 0,
      isEncrypted: true,
      messages: [{
        id: Date.now(),
        senderId: 0,
        content: `${newGroupName} group created`,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        encrypted: false,
        isSystem: true
      }]
    };

    setChats(prev => [newGroup, ...prev]);
    setShowGroupModal(false);
    setNewGroupName('');
    setSelectedUsers([]);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [activeChat?.messages]);

  return (
    <div className="h-screen bg-gray-50 flex">
      {/* Sidebar */}
      <div className="w-1/3 bg-white border-r border-gray-200 flex flex-col">
        {/* Sidebar Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-xl font-semibold text-gray-800">ChatSecure</h1>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowGroupModal(true)}
                className="p-2 hover:bg-gray-100 rounded-full"
                title="Create Group"
              >
                <Plus className="w-5 h-5 text-gray-600" />
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-full">
                <Settings className="w-5 h-5 text-gray-600" />
              </button>
            </div>
          </div>
          
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Search chats..."
              className="w-full pl-10 pr-4 py-2 bg-gray-50 border-none rounded-lg focus:ring-2 focus:ring-blue-500 focus:bg-white"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Chats List */}
        <div className="flex-1 overflow-y-auto">
          {filteredChats.map(chat => (
            <div
              key={chat.id}
              onClick={() => setActiveChat(chat)}
              className={`p-4 hover:bg-gray-50 cursor-pointer border-b border-gray-100 ${
                activeChat?.id === chat.id ? 'bg-blue-50 border-r-2 border-r-blue-500' : ''
              }`}
            >
              <div className="flex items-center space-x-3">
                <div className="relative">
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-xl">
                    {chat.avatar}
                  </div>
                  {chat.type === 'private' && (
                    <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white"></div>
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <h3 className="font-medium text-gray-900 truncate">{chat.name}</h3>
                      {chat.isEncrypted && (
                        <Lock className="w-3 h-3 text-green-500" title="End-to-end encrypted" />
                      )}
                    </div>
                    <span className="text-xs text-gray-500">{chat.lastMessageTime}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <p className="text-sm text-gray-600 truncate">{chat.lastMessage}</p>
                    {chat.unreadCount > 0 && (
                      <span className="ml-2 bg-blue-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                        {chat.unreadCount}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {activeChat ? (
          <>
            {/* Chat Header */}
            <div className="bg-white border-b border-gray-200 p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-lg">
                    {activeChat.avatar}
                  </div>
                  <div>
                    <div className="flex items-center space-x-2">
                      <h2 className="font-medium text-gray-900">{activeChat.name}</h2>
                      {activeChat.isEncrypted && (
                        <Shield className="w-4 h-4 text-green-500" title="End-to-end encrypted" />
                      )}
                    </div>
                    <p className="text-sm text-gray-500">
                      {activeChat.type === 'group' ? `${activeChat.participants.length} members` : 'Online'}
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <button className="p-2 hover:bg-gray-100 rounded-full">
                    <Phone className="w-5 h-5 text-gray-600" />
                  </button>
                  <button className="p-2 hover:bg-gray-100 rounded-full">
                    <Video className="w-5 h-5 text-gray-600" />
                  </button>
                  <button className="p-2 hover:bg-gray-100 rounded-full">
                    <MoreVertical className="w-5 h-5 text-gray-600" />
                  </button>
                </div>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {activeChat.messages.map(msg => (
                <div
                  key={msg.id}
                  className={`flex ${msg.senderId === currentUser.id ? 'justify-end' : 'justify-start'}`}
                >
                  {msg.isSystem ? (
                    <div className="text-center text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                      {msg.content}
                    </div>
                  ) : (
                    <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      msg.senderId === currentUser.id
                        ? 'bg-blue-500 text-white'
                        : 'bg-white border border-gray-200'
                    }`}>
                      {activeChat.type === 'group' && msg.senderId !== currentUser.id && (
                        <p className="text-xs text-gray-600 mb-1">{getUserName(msg.senderId)}</p>
                      )}
                      <p className="break-words">{msg.content}</p>
                      <div className="flex items-center justify-between mt-1">
                        <p className={`text-xs ${
                          msg.senderId === currentUser.id ? 'text-blue-100' : 'text-gray-500'
                        }`}>
                          {msg.timestamp}
                        </p>
                        {msg.encrypted && (
                          <Lock className={`w-3 h-3 ${
                            msg.senderId === currentUser.id ? 'text-blue-200' : 'text-green-500'
                          }`} />
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="bg-white border-t border-gray-200 p-4">
              <div className="flex items-center space-x-2">
                <button className="p-2 hover:bg-gray-100 rounded-full">
                  <Paperclip className="w-5 h-5 text-gray-600" />
                </button>
                <div className="flex-1 relative">
                  <input
                    type="text"
                    placeholder="Type a message..."
                    className="w-full px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                  />
                </div>
                <button className="p-2 hover:bg-gray-100 rounded-full">
                  <Smile className="w-5 h-5 text-gray-600" />
                </button>
                <button
                  onClick={sendMessage}
                  className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full transition-colors"
                  disabled={!message.trim()}
                >
                  <Send className="w-5 h-5" />
                </button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-gray-50">
            <div className="text-center">
              <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <Users className="w-8 h-8 text-gray-500" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Select a conversation</h3>
              <p className="text-gray-500">Choose a chat from the sidebar to start messaging</p>
            </div>
          </div>
        )}
      </div>

      {/* Create Group Modal */}
      {showGroupModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold mb-4">Create New Group</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Group Name</label>
                <input
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  value={newGroupName}
                  onChange={(e) => setNewGroupName(e.target.value)}
                  placeholder="Enter group name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Select Members</label>
                <div className="max-h-32 overflow-y-auto space-y-2">
                  {users.map(user => (
                    <label key={user.id} className="flex items-center space-x-3">
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        checked={selectedUsers.includes(user.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedUsers([...selectedUsers, user.id]);
                          } else {
                            setSelectedUsers(selectedUsers.filter(id => id !== user.id));
                          }
                        }}
                      />
                      <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-sm">
                        {user.avatar}
                      </div>
                      <span className="text-sm">{user.name}</span>
                    </label>
                  ))}
                </div>
              </div>
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={() => setShowGroupModal(false)}
                  className="flex-1 px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={createGroup}
                  className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                  disabled={!newGroupName.trim() || selectedUsers.length === 0}
                >
                  Create Group
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
